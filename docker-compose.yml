# deployエラーのため portを 3000,5432に設定

version: '3'
services:
  db:
    image: postgres
    # dbのユーザー名とパスワードでこれが無いとdbが起動できなかった
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    # 無くても動くけど指定しておくとdocker-composeを停止してもdbの内容が永続化されるため、指定することが多いと思われる
    # https://matsuand.github.io/docs.docker.jp.onthefly/storage/volumes/
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    # 無くても動くが指定しておくとコンテナ停止時にサービスが再起動してくれる
    # https://docs.docker.jp/v19.03/config/container/start-containers-automatically.html
    restart: always
  web:
    build: .
    # tmp/pids/server.pidが残ってたら `A server is already running. ~~` のエラーでrailsを起動できないので事前に消してから、`rails sever` する
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    # 上記のdbイメージで指定したユーザー名とパスワードをrails側でも指定するため環境変数に設定。
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    # ホストのカレントディレクトリ(.)とイメージ内の/myappディレクトリを同期させている
    volumes:
      - .:/myapp
    ports:
      - "3000:3000"
    restart: always # コンテナが停止すると常に再起動
    tty: true # 疑似ターミナル (pseudo-TTY) を割り当て。https://docs.docker.jp/compose/compose-file/index.html#tty
    stdin_open: true # サービス コンテナに標準入力を割り当てて実行するよう設定(https://docs.docker.jp/compose/compose-file/index.html#stdin-open)。
    depends_on:
      - db
volumes:
  postgres_volume:


# version: '3'
# services:
#   db:
#     image: postgres
#     environment:
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: password
#     volumes:
#       - postgres_volume:/var/lib/postgresql/data
#     ports:
#       - "5438:5438" 
#     restart: always

#   web:
#     build: .
#     command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails server -p ${PORT:-3003} -b '0.0.0.0'"
#     environment:
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: password
#       PORT: 3003 # デフォルトポートを環境変数に設定
#     volumes:
#       - .:/myapp
#     ports:
#       - "3003:3003"
#     restart: always
#     tty: true
#     stdin_open: true
#     depends_on:
#       - db

# volumes:
#   postgres_volume:


# version: '3'
# services:
#   db:
#     image: postgres
#     # dbのユーザー名とパスワードでこれが無いとdbが起動できなかった
#     environment:
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: password
#     # 無くても動くけど指定しておくとdocker-composeを停止してもdbの内容が永続化されるため、指定することが多いと思われる
#     # https://matsuand.github.io/docs.docker.jp.onthefly/storage/volumes/
#     volumes:
#       - postgres_volume:/var/lib/postgresql/data
#     ports:
#       - 5438:5438
#     # 無くても動くが指定しておくとコンテナ停止時にサービスが再起動してくれる
#     # https://docs.docker.jp/v19.03/config/container/start-containers-automatically.html
#     restart: always
#   web:
#     build: .
#     # tmp/pids/server.pidが残ってたら `A server is already running. ~~` のエラーでrailsを起動できないので事前に消してから、`rails sever` する
#     command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3003 -b '0.0.0.0'"
#     # 上記のdbイメージで指定したユーザー名とパスワードをrails側でも指定するため環境変数に設定。
#     environment:
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: password
#     # ホストのカレントディレクトリ(.)とイメージ内の/myappディレクトリを同期させている
#     volumes:
#       - .:/myapp
#     ports:
#       - "3003:3003"
#     restart: always # コンテナが停止すると常に再起動
#     tty: true # 疑似ターミナル (pseudo-TTY) を割り当て。https://docs.docker.jp/compose/compose-file/index.html#tty
#     stdin_open: true # サービス コンテナに標準入力を割り当てて実行するよう設定(https://docs.docker.jp/compose/compose-file/index.html#stdin-open)。
#     depends_on:
#       - db
# volumes:
#   postgres_volume: